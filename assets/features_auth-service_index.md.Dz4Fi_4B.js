import{_ as n,c as s,a2 as t,b as o,w as a,a3 as d,B as l,o as r,G as h,a as c}from"./chunks/framework.DAx0yoxq.js";const v=JSON.parse('{"title":"Auth-Service","description":"","frontmatter":{},"headers":[],"relativePath":"features/auth-service/index.md","filePath":"features/auth-service/index.md"}'),m={name:"features/auth-service/index.md"};function u(A,e,g,p,b,f){const i=l("Mermaid");return r(),s("div",null,[e[1]||(e[1]=t('<h1 id="auth-service" tabindex="-1">Auth-Service <a class="header-anchor" href="#auth-service" aria-label="Permalink to &quot;Auth-Service&quot;">​</a></h1><p>Zuständig für die Authentifizierung und Verwaltung der Rechte der User des Systems.</p><h2 id="abhangigkeiten" tabindex="-1">Abhängigkeiten <a class="header-anchor" href="#abhangigkeiten" aria-label="Permalink to &quot;Abhängigkeiten&quot;">​</a></h2><p>Der Service hat keine Abhängigkeiten zu anderen Services.</p><h2 id="datenmodell" tabindex="-1">Datenmodell <a class="header-anchor" href="#datenmodell" aria-label="Permalink to &quot;Datenmodell&quot;">​</a></h2>',5)),(r(),o(d,null,{default:a(()=>[h(i,{id:"mermaid-15",class:"mermaid my-class",graph:"%0AerDiagram%0A%20%20%20%20User%201--0%2B%20Authority%20%3A%20hat%0A%20%20%20%20Authority%201--0%2B%20Permission%20%3A%20hat%0A%20%20%20%20User%201--%7Co%20LoginAttempt%20%3A%20unternahm%0A%20%20%20%20%0A%20%20%20%20User%20%7B%0A%20%20%20%20%20%20%20%20String%20username%0A%20%20%20%20%20%20%20%20boolean%20userEnabled%0A%20%20%20%20%20%20%20%20boolean%20accountNonLocked%0A%20%20%20%20%20%20%20%20String%20wahltagID%0A%20%20%20%20%20%20%20%20LocalDate%20wahltag%0A%20%20%20%20%20%20%20%20String%20wahlbezirkID%0A%20%20%20%20%20%20%20%20String%20wahlbezirkNummer%0A%20%20%20%20%20%20%20%20Wahlbezirksart%20wahlbezirksArt%0A%20%20%20%20%20%20%20%20String%20pin%0A%20%20%20%20%20%20%20%20String%20wbid_wahlnummer%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20Authority%20%7B%0A%20%20%20%20%20%20%20%20String%20authority%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20Permission%20%7B%0A%20%20%20%20%20%20%20%20String%20permission%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20LoginAttempt%20%7B%0A%20%20%20%20%20%20%20%20int%20attempts%0A%20%20%20%20%20%20%20%20LocalDateTime%20lastModified%0A%20%20%20%20%7D%0A"})]),fallback:a(()=>e[0]||(e[0]=[c(" Loading... ")])),_:1})),e[2]||(e[2]=t('<div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>Der Benutzername liegt in der Datenbank nur verschlüsselt vor.</p></div><h2 id="konfigrationsparameter" tabindex="-1">Konfigrationsparameter <a class="header-anchor" href="#konfigrationsparameter" aria-label="Permalink to &quot;Konfigrationsparameter&quot;">​</a></h2><p>Alle Konfigurationsparameter beginnen mit dem Prefix <code>serviceauth</code></p><table tabindex="0"><thead><tr><th>Name</th><th>Beschreibung</th><th>Default</th></tr></thead><tbody><tr><td>crypto.encryptionPrefix</td><td>String vor dem verschlüssten Wert. Auf diese Weise sind verschlüsselte Werte erkennbar</td><td>ENCRYPTED:</td></tr><tr><td>crypto.key</td><td>Schlüssel zum ver- und entschlüsseln</td><td></td></tr><tr><td>maxLoginAttempts</td><td>Maximale Anzahl an Fehlersuchen bis der Account gesperrt wird.</td><td>5</td></tr></tbody></table>',4))])}const S=n(m,[["render",u]]);export{v as __pageData,S as default};
