package de.muenchen.oss.wahllokalsystem.service;

import de.muenchen.oss.wahllokalsystem.rest.BroadcastMessageDTO;
import de.muenchen.oss.wahllokalsystem.rest.MessageDTO;
import de.muenchen.oss.wahllokalsystem.wls.common.exception.FachlicheWlsException;
import de.muenchen.oss.wahllokalsystem.wls.common.exception.util.ExceptionKonstanten;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import de.muenchen.oss.wahllokalsystem.domain.Message;
import de.muenchen.oss.wahllokalsystem.domain.MessageRepository;

/**
 * Provides a service to execute business-actions.
 * If used as generated by GAIA this service will be autowired and called by BusinessActionController.
 */
@Service
@PreAuthorize("hasAuthority('Broadcast_BUSINESSACTION_Broadcast')")
@Slf4j
@Component
public class BroadcastService {

    @Autowired
    MessageRepository messageRepo;

    @Autowired
    BroadcastMapper bcMapper;

    public void broadcast(final BroadcastMessageDTO messageToBroadcast){
        log.debug("#broadcast");
        
        
        // To Do Validierung Über die Validation API
        /*if ( wahlbezirkIDs == null || wahlbezirkIDs.isEmpty() || Strings.isNullOrEmpty(nachricht)) {
            throw WlsExceptionFactory.build(ExceptionKonstanten.CODE_NACHRICHTENABRUFEN_PARAMETER_UNVOLLSTAENDIG);
        }*/

        LocalDateTime now = LocalDateTime.now();
        List<Message> messagesToSave = messageToBroadcast.wahlbezirkIDs().stream().map(s -> {
            Message message = new Message();
            message.setWahlbezirkID(s);
            message.setEmpfangsZeit(now);
            message.setNachricht(messageToBroadcast.nachricht());
            return message;
        }).toList();

        log.debug("Storing {} new messages...", messagesToSave.size());

        messageRepo.saveAll(messagesToSave);
    }

    public MessageDTO getOldestMessage(String wahlbezirkID) throws FachlicheWlsException {
        log.debug("#nachrichtenAbrufen");

        //ToDo:     Wird später

       /* if (Strings.isNullOrEmpty(wahlbezirkID)) {
            throw WlsExceptionFactory.build(ExceptionKonstanten.CODE_NACHRICHTENABRUFEN_PARAMETER_UNVOLLSTAENDIG);
        }*/

        val message = messageRepo.findFirstByWahlbezirkIDOrderByEmpfangsZeit(wahlbezirkID);

        if (message.isEmpty()) {
            throw FachlicheWlsException.withCode(ExceptionKonstanten.CODE_ENTITY_NOT_FOUND).buildWithMessage("No message found");
        }

        return bcMapper.toDto(message.get());
    }

    public void deleteMessage(String nachrichtID) { //TODO UUID als Parameter
        log.debug("#nachrichtGelesen");

//         if (Strings.isNullOrEmpty(nachrichtID)) {
//             throw WlsExceptionFactory.build(ExceptionKonstanten.CODE_NACHRICHTENABRUFEN_PARAMETER_UNVOLLSTAENDIG);
//         }

        val nachrichtUUID = java.util.UUID.fromString(nachrichtID);
        try {
            messageRepo.deleteById(nachrichtUUID);
        } catch (Exception e) {
            log.info("Message with OID:" + nachrichtUUID + "already deleted"); //TODO hat das Altsystem einen Fehler geworfen
        }
    }

}

